@using System.Text.RegularExpressions
@* @rendermode InteractiveServer *@
@using BlazorBootstrap
@using Components.Models
@inject IJSRuntime JS



@* Display the Tile *@
<div id="@Title.Replace(" ", "-")" class="tile" style="@Style">
    <h3>@Title</h3>
    <button @onclick="() => ShareTile(Title)">Share this Tile!</button>


    @* If a graph is wanted *@
    @if (Graph != null)
    {
        @if (Graph.GraphType == "pie")
        {
            <PieChartMaker Title="@Graph.GraphTitle" PopupLabel="@Graph.PopupLabel" Data="@Data" />
        }
        else if (Graph.GraphType == "bar")
        {
            <BarGraphMaker Title="@Graph.GraphTitle" XLabel="@Graph.XLabel" YLabel="@Graph.YLabel" Data="@Data" />
        }
    }


    @* Display the data *@
    <ul>
        @foreach (EntryCount entry in Data)
        {
            @if (string.IsNullOrEmpty(Message))
            {
                <li>@entry.Content: @entry.Count</li>
            }
            else
            {
                <li>@Message.Replace("{Content}", entry.Content)</li>
            }
        }
    </ul>
</div>


@code {

    public class messageFormat
    {
        public string Date = "";
        public string Time = "";
        public string Sender = "";
        public string Content = "";
    }

    [Parameter]
    public string Title { get; set; } = "";

    [Parameter]
    public string? Message { get; set; } = "";

    [Parameter]
    public List<EntryCount> Data { get; set; } = new List<EntryCount> { };

    [Parameter]
    public string Style { get; set; } = "";

    [Parameter]
    public GraphDetails? Graph { get; set; } = new GraphDetails { };




    private List<messageFormat> filteredMessages = new List<messageFormat> { };
    private List<messageFormat> clickedMessages = new List<messageFormat> { };


    private async Task DisplayFiltered(string filter)
    {

        clickedMessages = filteredMessages

        // Check if its empty
        .Where(message => !string.IsNullOrEmpty(message.Time))
        .Where(message => message.Content.Contains(filter))
        .ToList();
    }

    private async Task ShareTile(string tileTitle)
    {

        // Change the title spaces to -, same as ID
        string ID = tileTitle.Replace(" ", "-");
        Console.WriteLine("cacekclelecalled: " + ID);
        await JS.InvokeAsync<string>("getTile", ID);
    }

}
